{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Varnish Configuration Language",
  "patterns": [
    {
      "include": "#macros"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#types"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "macros": {
      "patterns": [
        {
          "name": "keyword.control.vcl",
          "match": "#FASTLY.+"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.vcl",
          "match": "#.+"
        },
        {
          "name": "comment.line.double-slash.vcl",
          "match": "//.+"
        },
        {
          "name": "comment.line.block.vcl",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric.vcl",
          "match": "\\b-?[0-9]+(\\.[0-9])?\\s*(ms|s|m|h|d|y)\\b"
        },
        {
          "name": "constant.numeric.vcl",
          "match": "\\b-?[0-9]+(\\.[0-9])?\\s*%"
        },
        {
          "name": "constant.numeric.vcl",
          "match": "\\b-?[0-9]+(\\.[0-9])?(e[+-]?[0-9]+)?\\b"
        },
        {
          "name": "constant.numeric.vcl",
          "match": "\\b-?0x[0-9A-Fa-f]+(\\.[0-9A-Fa-f]+)?(p[+-]?[0-9]+)?\\b\\b"
        },
        {
          "name": "constant.language.vcl",
          "match": "\\b(always|false|true)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "support.function.vcl",
          "match": "\\b(accept.charset_lookup|accept.encoding_lookup|accept.language_filter_basic|accept.language_lookup|accept.media_lookup)\\b"
        },
        {
          "name": "support.function.vcl",
          "match": "\\b(bin.base64_to_hex|bin.hex_to_base64|crypto.decrypt_base64|crypto.decrypt_hex|crypto.encrypt_base64|crypto.encrypt_hex|digest.awsv4_hmac|digest.base64_decode|digest.base64|digest.base64url_decode|digest.base64url_nopad|digest.base64url_nopad_decode|digest.base64url|digest.hash_crc32|digest.hash_crc32b|digest.hash_md5|digest.hash_sha1_from_base64|digest.hash_sha1|digest.hash_sha224|digest.hash_sha256_from_base64|digest.hash_sha256|digest.hash_sha384|digest.hash_sha512_from_base64|digest.hash_sha512|digest.hmac_md5_base64|digest.hmac_md5|digest.hmac_sha1_base64|digest.hmac_sha1|digest.hmac_sha256_base64|digest.hmac_sha256|digest.hmac_sha512_base64|digest.hmac_sha512|digest.rsa_verify|digest.secure_is_equal|digest.time_hmac_md5|digest.time_hmac_sha1|digest.time_hmac_sha256|digest.time_hmac_sha512)\\b"
        },
        {
          "name": "support.function.vcl",
          "match": "\\b(parse_time_delta|std.integer2time|std.time|strftime|time.add|time.hex_to_time|time.is_after|time.runits|time.sub|time.units)\\b"
        },
        {
          "name": "support.function.vcl",
          "match": "\\b(math.is_finite|math.is_infinite|math.is_nan|math.is_normal|math.is_subnormal)\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.vcl",
          "match": "\\b(else|if|return)\\b"
        },
        {
          "name": "keyword.other.vcl",
          "match": "\\b(acl|backend|declare local|director|log|penaltybox|ratecounter|set|table|unset)\\b"
        },
        {
          "name": "keyword.operator.vcl",
          "match": "(!|=|==|!=|>=|<=|>|<|~|!~|\\|\\||&&|[+*/%&^-|]=|rol=|ror=|\\|\\|=|\\+)"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.vcl",
          "begin": "{([a-z]+)?\"",
          "end": "\"\\1}",
          "patterns": [
            {
              "name": "constant.character.escape.vcl",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.double.vcl",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.vcl",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.vcl",
          "match": "\\b(ACL|BACKEND|BOOL|FLOAT|ID|INTEGER|IP|RTIME|STRING|TIME)\\b"
        },
        {
          "name": "storage.type.vcl",
          "match": "\\b(chash|client|fallback|hash|random)\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "support.variable.vcl",
          "match": "\\b(bereq|beresp|obj|req|resp)\\.[a-zA-Z0-9_.-]+"
        },
        {
          "name": "variable.other.vcl",
          "match": "\\b(var)\\.[a-zA-Z0-9_-]+"
        },
        {
          "name": "variable.other.vcl",
          "match": "\\bF_[a-zA-Z0-9_-]+"
        },
        {
          "name": "support.other.vcl",
          "match": "\\.(address|always_use_host_header|auto_loadbalance|between_bytes_timeout|bypass_local_route_table|client_cert|comment|connect_timeout|dynamic|first_byte_timeout|healthcheck|hostname|host_header|host|ipv4|ipv6|max_connections|max_tls_version|min_tls_version|name|override_host|port|probe|share_key|ssl_ca_cert|ssl_cert_hostname|ssl_check_cert|ssl_cipehers|ssl_client_cert|ssl_client_key|ssl_sni_hostname|ssl|use_ssl|weight)"
        },
        {
          "name": "support.other.vcl",
          "match": "\\.(dummy|expected_response|initial|interval|request|timeout|threshold|window)"
        },
        {
          "name": "support.other.vcl",
          "match": "\\.(id|key|quorum|seed|retries|vnodes_per_node)"
        },
        {
          "name": "support.variable.vcl",
          "match": "\\b(now)\\b"
        }
      ]
    }
  },
  "scopeName": "source.vcl"
}
